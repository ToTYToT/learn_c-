k  // 备份自己原来的vimrc配置文件

$git clone https://github.com/haohb13/vimrc

$cd vimrc

$./install.sh

ctrlp的使用

1. 连按两个,, 打开ctrlp的列表

2. ctrl + j, k 上下选择文件

3. 选中文件之后，直接按回车键，就会切换到选中的文件；
按ctrl + t会在新的标签中打开该文件

4. 它还支持模糊查找

编程范式

C     面向过程

C++   完全兼容C
面向过程
better C
面向对象
基于对象
泛型编程
模板元编程
函数式编程

1. 名称空间
作用域限定符  std::cout
using声明机制 （推荐使用） using std::cout;
using编译指令 using namespace std;
2. const关键字  与指针
int a = 10;
int b = 20;
const int * pa = &a;//常量指针(pointer to const)
*pa = 30;//Error
int * const pb = &b;//指针常量(const pointer)
pb = &a;//Error

const int c;//Error, 常量必须要进行初始化

const与#define的区别

3. new/delete malloc/free  区别

4. 引用与指针的区别
> 是一个实体的别名
> 引用必须要进行初始化
> 引用一旦绑定到一个实体之后，就不能指向其它的实体
> (引用的底层实现还是指针)

> 指针本身就是一个实体
> 指针可以不初始化，一般都要进行初始化，可以直接赋值为空
> 指针可以改变指向

引用作为函数的参数
与值传递相比而言，不需要开辟额外的空间，
操作引用的时候就是在操作实参，可以提高程序的执行效率

引用作为函数的返回值
> 不要返回一个局部变量的引用
> 不要返回一个堆空间变量的引用

5. 强制转换
static_cast/const_cast/dynamic_cast/reinterpret_cast
6. 函数重载–实现原理:名字改编
根据函数参数的类型，个数，顺序来进行

7. C与C++的混合编程
C不支持函数重载
extern "C"
{

}

8. 带默认参数的函数–消除二义性
int add(int a, int b = 0, int c = 0);
9. bool类型 true false
10. std::string类型
将C++风格的字符串转换成C风格的，使用一个方法c_str()

string s1 = "hello,world";
const char * pstr = s1.c_str();

11. C++的输入输出流

day 02 20161018
0. 复习
1. C++程序的内存布局
栈区，堆区，全局/静态区，文字常量区，程序代码区
2. 类的定义
class Point
{
public://接口,对外提供的服务
Point();
Point(int ix, int iy);

void print();  //成员函数
protected:

private:
int _ix;
int _iy; //成员数据
};


void Point::print()
{
cout << "(" << _ix
<< "," << _iy
<< ")" << endl;
}

3. 构造函数和析构函数
Point pt1;// 调用了无参（默认）构造函数

Point pt2(1, 2);// 调用了有参构造函数

> 如果类中没有显式提供任何构造函数，系统会自动
提供一个默认构造函数
> 如果显式提供了一个有参构造函数，系统就不会再提供
默认构造函数；如果要通过默认构造函数创建对象，此时
必须要显式提供默认构造函数

Point pt3(pt2); //调用复制构造函数
Point pt4 = pt2;

复制构造函数
> 类名(const 类名 & rhs);
> 调用时机：
> 当把一个存在的对象赋值给一个新对象时
> 当函数参数是对象，形参与实参进行结合时
> 函数返回值是对象，函数调用完成返回时
> 如果复制构造函数的参数是对象，则执行复制构造函数时
会发生无穷递归，导致栈溢出; 所以它的参数不能是对象
只能是引用

Point pt1(1, 2);
Point pt2(3, 4);
pt2 = pt1;//调用赋值运算符函数

Point & operator=(const Point & rhs);

class Computer
{
private:
//...
char * _brand;
};

对于构造函数，可以使用初始化表达式来初始化数据成员

析构函数
>  栈对象， 其生命周期结束时，会自动调用析构函数
>  可以显示调用析构函数，一般不推荐这样使用；
析构函数的作用就是用来清理现场
>  全局对象/静态对象，只要程序运行结束时，会自动调用析构函数
>  堆对象，只有在执行delete时，会自动调用析构函数

4. 初始化表达式

day 03 20161019
0. 复习
1. 类和对象
特殊的数据成员
特殊的成员函数
对象数组
对象的大小
单例模式
